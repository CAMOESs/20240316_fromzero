{
  "resolvedId": "/mnt/1c4c2374-6f70-425b-ab4c-d1db6332863a/carlos/project/2024/CQM/node_modules/vuestic-ui/dist/esm-node/src/components/va-accordion/hooks/useAccordion.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { ref, watch, provide, computed, inject, onMounted, onBeforeUnmount } from \"vue\";\nconst AccordionServiceKey = Symbol(\"AccordionService\");\nconst useAccordion = (props, state) => {\n  const items = ref([]);\n  const onItemMounted = (item) => {\n    items.value.push(item);\n  };\n  const onItemUnmounted = (item) => {\n    items.value = items.value.filter((i) => i !== item);\n  };\n  const getItemValue = (item) => {\n    return state.value[items.value.indexOf(item)] ?? false;\n  };\n  const setItemValue = (item, value) => {\n    const index = items.value.indexOf(item);\n    if (index === -1) {\n      return;\n    }\n    if (!props.multiple) {\n      state.value = state.value.map((el, i) => {\n        if (i === index) {\n          return value;\n        }\n        return false;\n      });\n    } else {\n      state.value[index] = value;\n    }\n  };\n  watch(items, (newItems) => {\n    state.value = newItems.map((item) => getItemValue(item));\n  }, { deep: true });\n  provide(AccordionServiceKey, {\n    isInsideAccordion: true,\n    onItemMounted,\n    onItemUnmounted,\n    getItemValue,\n    setItemValue,\n    props: computed(() => props)\n  });\n  return { items };\n};\nconst useAccordionItem = () => {\n  const accordion = inject(AccordionServiceKey, void 0);\n  if (!accordion) {\n    return { accordionProps: ref({}) };\n  }\n  const item = {};\n  onMounted(() => accordion.onItemMounted(item));\n  onBeforeUnmount(() => accordion.onItemUnmounted(item));\n  const valueProxy = computed({\n    get: () => accordion.getItemValue(item),\n    set: (value) => accordion.setItemValue(item, value)\n  });\n  return {\n    valueProxy,\n    accordionProps: accordion.props\n  };\n};\nexport {\n  useAccordionItem as a,\n  useAccordion as u\n};\n//# sourceMappingURL=useAccordion.mjs.map\n",
      "start": 1709717512872,
      "end": 1709717513102,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1709717513103,
      "end": 1709717513103,
      "order": "pre"
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1709717513103,
      "end": 1709717513103,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1709717513103,
      "end": 1709717513103,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1709717513103,
      "end": 1709717513103,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1709717513103,
      "end": 1709717513103,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1709717513103,
      "end": 1709717513103,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1709717513103,
      "end": 1709717513103,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1709717513103,
      "end": 1709717513103,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1709717513103,
      "end": 1709717513103,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1709717513103,
      "end": 1709717513103,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1709717513103,
      "end": 1709717513103,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709717513103,
      "end": 1709717513103,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709717513103,
      "end": 1709717513103,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1709717513103,
      "end": 1709717513103,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1709717513103,
      "end": 1709717513103,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709717513103,
      "end": 1709717513103,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1709717513103,
      "end": 1709717513103,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709717513103,
      "end": 1709717513103,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1709717513103,
      "end": 1709717513103,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1709717513103,
      "end": 1709717513103,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1709717513103,
      "end": 1709717513103,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1709717513103,
      "end": 1709717513103,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1709717513104,
      "end": 1709717513104,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1709717513104,
      "end": 1709717513104,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1709717513104,
      "end": 1709717513104,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1709717513104,
      "end": 1709717513104,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1709717513104,
      "end": 1709717513104,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1709717513104,
      "end": 1709717513104,
      "order": "post"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1709717513104,
      "end": 1709717513104,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1709717513104,
      "end": 1709717513104,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1709717513104,
      "end": 1709717513104,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1709717513104,
      "end": 1709717513104,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1709717513104,
      "end": 1709717513104,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1709717513104,
      "end": 1709717513104,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1709717513104,
      "end": 1709717513104,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-template",
      "start": 1709717513104,
      "end": 1709717513104,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1709717513104,
      "end": 1709717513104,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "result": "import { ref, watch, provide, computed, inject, onMounted, onBeforeUnmount } from \"vue\";\nconst AccordionServiceKey = Symbol(\"AccordionService\");\nconst useAccordion = (props, state) => {\n  const items = ref([]);\n  const onItemMounted = (item) => {\n    items.value.push(item);\n  };\n  const onItemUnmounted = (item) => {\n    items.value = items.value.filter((i) => i !== item);\n  };\n  const getItemValue = (item) => {\n    return state.value[items.value.indexOf(item)] ?? false;\n  };\n  const setItemValue = (item, value) => {\n    const index = items.value.indexOf(item);\n    if (index === -1) {\n      return;\n    }\n    if (!props.multiple) {\n      state.value = state.value.map((el, i) => {\n        if (i === index) {\n          return value;\n        }\n        return false;\n      });\n    } else {\n      state.value[index] = value;\n    }\n  };\n  watch(items, (newItems) => {\n    state.value = newItems.map((item) => getItemValue(item));\n  }, { deep: true });\n  provide(AccordionServiceKey, {\n    isInsideAccordion: true,\n    onItemMounted,\n    onItemUnmounted,\n    getItemValue,\n    setItemValue,\n    props: computed(() => props)\n  });\n  return { items };\n};\nconst useAccordionItem = () => {\n  const accordion = inject(AccordionServiceKey, void 0);\n  if (!accordion) {\n    return { accordionProps: ref({}) };\n  }\n  const item = {};\n   /*#__PURE__*/ false && onMounted(() => accordion.onItemMounted(item));\n   /*#__PURE__*/ false && onBeforeUnmount(() => accordion.onItemUnmounted(item));\n  const valueProxy = computed({\n    get: () => accordion.getItemValue(item),\n    set: (value) => accordion.setItemValue(item, value)\n  });\n  return {\n    valueProxy,\n    accordionProps: accordion.props\n  };\n};\nexport {\n  useAccordionItem as a,\n  useAccordion as u\n};\n//# sourceMappingURL=useAccordion.mjs.map\n",
      "start": 1709717513104,
      "end": 1709717513104,
      "order": "post",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": "AAAA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3B,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxD,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClzC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC;AACF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvC,CAAC,CAAC,CAAC;AACH,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB,mCAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjD,yCAAiB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzvD,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnC,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC;AACF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC;AACF,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;"
      }
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1709717513104,
      "end": 1709717513105,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1709717513105,
      "end": 1709717513105,
      "order": "normal"
    }
  ]
}
