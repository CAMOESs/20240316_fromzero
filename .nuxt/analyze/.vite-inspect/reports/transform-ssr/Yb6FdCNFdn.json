{
  "resolvedId": "/mnt/1c4c2374-6f70-425b-ab4c-d1db6332863a/carlos/project/2024/CQM/plugins/checker.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "// import { useSnackbar } from \"~~/store/snackbar\";\nimport moment from \"moment\";\ninterface DataInterface {\n  lastname?: string;\n  firstname?: string;\n  sex?: string;\n  nationality?: string;\n  place_of_birth?: string;\n  phone_number?: string;\n}\ninterface SexInterface {\n  sex: string | undefined | null;\n  [key: string]: any;\n}\ninterface NameInterface {\n  lastname: string | undefined | null;\n  firstname: string | undefined | null;\n  [key: string]: any;\n}\ninterface NationalityInterface {\n  nationality: string | undefined | null;\n  [key: string]: any;\n}\ninterface PlaceInterface {\n  place_of_birth: string | undefined | null;\n  phone_number?: string | undefined | null;\n  [key: string]: any;\n}\n\ninterface MyDate {\n  [key: string]: any;\n}\n\nlet isContainAbbreviation = (value: string | undefined | null): Boolean => {\n  if (!value) return true;\n  return value.includes(\".\") || value.split(\" \").some((v) => v.length == 1);\n};\n// let snackbar = useSnackbar();\nexport default defineNuxtPlugin((/* nuxtApp */) => {\n  return {\n    provide: {\n      checkSex: (tab: SexInterface[]): void => {\n        // console.log(tab);\n\n        if (tab.some((v) => !v.sex || ![\"F\", \"M\"].includes(v.sex))) {\n          throw `Sexe au mauvais format: Verifiez votre liste <br>\n          Le sexe doit être M ou F`;\n        }\n      },\n      checkName: (tab: NameInterface[]): void => {\n        if (tab.some((v) => !v.lastname || !v.firstname)) {\n          throw `Nom & prénoms obligatoires`;\n        }\n\n        if (\n          tab.some(\n            (v) =>\n              isContainAbbreviation(v.firstname) ||\n              isContainAbbreviation(v.lastname)\n          )\n        ) {\n          throw `Les noms et/ou prénoms doivent être conformes à l'acte de naissance et sans abréviation.`;\n        }\n      },\n      checkNationality: (tab: NationalityInterface[]): void => {\n        if (tab.some((v) => !v.nationality)) {\n          throw `Nationalité obligatoire.`;\n        }\n      },\n      checkPlaceOfBirth: (tab: PlaceInterface[]): void => {\n        if (tab.some((v) => !v.place_of_birth)) {\n          throw `Nationalité obligatoire.`;\n        }\n      },\n      checkPoneNumber: (tab: PlaceInterface[]): void => {\n        if (tab.some((v) => !v.phone_number || v.lenght < 8)) {\n          throw `Téléphone obligatoire à la soumission.`;\n        }\n      },\n      checkMatricule: (tab: PlaceInterface[]): void => {\n        if (tab.some((v) => !v.matricule || v.lenght < 8)) {\n          throw `Matricule obligatoire à la soumission.`;\n        }\n      },\n      checkAllDatesValid: (objects: MyDate[], dateKeys: string[]): void => {\n        for (const obj of objects) {\n          for (const key of dateKeys) {\n            const dateStr = obj[key];\n            if (!moment(dateStr, \"DD/MM/YYYY\", true).isValid()) {\n              throw `Date de naissance et date de premier prise de service sont obligatoires et au format JJ/MM/AAAA `;\n            }\n          }\n        }\n      },\n    \n    },\n  };\n});\n",
      "start": 1709717461230,
      "end": 1709717461689,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1709717461689,
      "end": 1709717461689,
      "order": "pre"
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1709717461689,
      "end": 1709717461689,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1709717461689,
      "end": 1709717461689,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1709717461689,
      "end": 1709717461689,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1709717461689,
      "end": 1709717461689,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1709717461689,
      "end": 1709717461689,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "result": "import moment from \"moment\";\nlet isContainAbbreviation = (value) => {\n  if (!value)\n    return true;\n  return value.includes(\".\") || value.split(\" \").some((v) => v.length == 1);\n};\nexport default defineNuxtPlugin(() => {\n  return {\n    provide: {\n      checkSex: (tab) => {\n        if (tab.some((v) => !v.sex || ![\"F\", \"M\"].includes(v.sex))) {\n          throw `Sexe au mauvais format: Verifiez votre liste <br>\n          Le sexe doit être M ou F`;\n        }\n      },\n      checkName: (tab) => {\n        if (tab.some((v) => !v.lastname || !v.firstname)) {\n          throw `Nom & prénoms obligatoires`;\n        }\n        if (tab.some(\n          (v) => isContainAbbreviation(v.firstname) || isContainAbbreviation(v.lastname)\n        )) {\n          throw `Les noms et/ou prénoms doivent être conformes à l'acte de naissance et sans abréviation.`;\n        }\n      },\n      checkNationality: (tab) => {\n        if (tab.some((v) => !v.nationality)) {\n          throw `Nationalité obligatoire.`;\n        }\n      },\n      checkPlaceOfBirth: (tab) => {\n        if (tab.some((v) => !v.place_of_birth)) {\n          throw `Nationalité obligatoire.`;\n        }\n      },\n      checkPoneNumber: (tab) => {\n        if (tab.some((v) => !v.phone_number || v.lenght < 8)) {\n          throw `Téléphone obligatoire à la soumission.`;\n        }\n      },\n      checkMatricule: (tab) => {\n        if (tab.some((v) => !v.matricule || v.lenght < 8)) {\n          throw `Matricule obligatoire à la soumission.`;\n        }\n      },\n      checkAllDatesValid: (objects, dateKeys) => {\n        for (const obj of objects) {\n          for (const key of dateKeys) {\n            const dateStr = obj[key];\n            if (!moment(dateStr, \"DD/MM/YYYY\", true).isValid()) {\n              throw `Date de naissance et date de premier prise de service sont obligatoires et au format JJ/MM/AAAA `;\n            }\n          }\n        }\n      }\n    }\n  };\n});\n",
      "start": 1709717461689,
      "end": 1709717461768,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "/mnt/1c4c2374-6f70-425b-ab4c-d1db6332863a/carlos/project/2024/CQM/plugins/checker.ts"
        ],
        "sourcesContent": [
          "// import { useSnackbar } from \"~~/store/snackbar\";\nimport moment from \"moment\";\ninterface DataInterface {\n  lastname?: string;\n  firstname?: string;\n  sex?: string;\n  nationality?: string;\n  place_of_birth?: string;\n  phone_number?: string;\n}\ninterface SexInterface {\n  sex: string | undefined | null;\n  [key: string]: any;\n}\ninterface NameInterface {\n  lastname: string | undefined | null;\n  firstname: string | undefined | null;\n  [key: string]: any;\n}\ninterface NationalityInterface {\n  nationality: string | undefined | null;\n  [key: string]: any;\n}\ninterface PlaceInterface {\n  place_of_birth: string | undefined | null;\n  phone_number?: string | undefined | null;\n  [key: string]: any;\n}\n\ninterface MyDate {\n  [key: string]: any;\n}\n\nlet isContainAbbreviation = (value: string | undefined | null): Boolean => {\n  if (!value) return true;\n  return value.includes(\".\") || value.split(\" \").some((v) => v.length == 1);\n};\n// let snackbar = useSnackbar();\nexport default defineNuxtPlugin((/* nuxtApp */) => {\n  return {\n    provide: {\n      checkSex: (tab: SexInterface[]): void => {\n        // console.log(tab);\n\n        if (tab.some((v) => !v.sex || ![\"F\", \"M\"].includes(v.sex))) {\n          throw `Sexe au mauvais format: Verifiez votre liste <br>\n          Le sexe doit être M ou F`;\n        }\n      },\n      checkName: (tab: NameInterface[]): void => {\n        if (tab.some((v) => !v.lastname || !v.firstname)) {\n          throw `Nom & prénoms obligatoires`;\n        }\n\n        if (\n          tab.some(\n            (v) =>\n              isContainAbbreviation(v.firstname) ||\n              isContainAbbreviation(v.lastname)\n          )\n        ) {\n          throw `Les noms et/ou prénoms doivent être conformes à l'acte de naissance et sans abréviation.`;\n        }\n      },\n      checkNationality: (tab: NationalityInterface[]): void => {\n        if (tab.some((v) => !v.nationality)) {\n          throw `Nationalité obligatoire.`;\n        }\n      },\n      checkPlaceOfBirth: (tab: PlaceInterface[]): void => {\n        if (tab.some((v) => !v.place_of_birth)) {\n          throw `Nationalité obligatoire.`;\n        }\n      },\n      checkPoneNumber: (tab: PlaceInterface[]): void => {\n        if (tab.some((v) => !v.phone_number || v.lenght < 8)) {\n          throw `Téléphone obligatoire à la soumission.`;\n        }\n      },\n      checkMatricule: (tab: PlaceInterface[]): void => {\n        if (tab.some((v) => !v.matricule || v.lenght < 8)) {\n          throw `Matricule obligatoire à la soumission.`;\n        }\n      },\n      checkAllDatesValid: (objects: MyDate[], dateKeys: string[]): void => {\n        for (const obj of objects) {\n          for (const key of dateKeys) {\n            const dateStr = obj[key];\n            if (!moment(dateStr, \"DD/MM/YYYY\", true).isValid()) {\n              throw `Date de naissance et date de premier prise de service sont obligatoires et au format JJ/MM/AAAA `;\n            }\n          }\n        }\n      },\n    \n    },\n  };\n});\n"
        ],
        "mappings": "AACA,OAAO,YAAY;AAgCnB,IAAI,wBAAwB,CAAC,UAA8C;AACzE,MAAI,CAAC;AAAO,WAAO;AACnB,SAAO,MAAM,SAAS,GAAG,KAAK,MAAM,MAAM,GAAG,EAAE,KAAK,CAAC,MAAM,EAAE,UAAU,CAAC;AAC1E;AAEA,eAAe,iBAAiB,MAAmB;AACjD,SAAO;AAAA,IACL,SAAS;AAAA,MACP,UAAU,CAAC,QAA8B;AAGvC,YAAI,IAAI,KAAK,CAAC,MAAM,CAAC,EAAE,OAAO,CAAC,CAAC,KAAK,GAAG,EAAE,SAAS,EAAE,GAAG,CAAC,GAAG;AAC1D,gBAAM;AAAA;AAAA,QAER;AAAA,MACF;AAAA,MACA,WAAW,CAAC,QAA+B;AACzC,YAAI,IAAI,KAAK,CAAC,MAAM,CAAC,EAAE,YAAY,CAAC,EAAE,SAAS,GAAG;AAChD,gBAAM;AAAA,QACR;AAEA,YACE,IAAI;AAAA,UACF,CAAC,MACC,sBAAsB,EAAE,SAAS,KACjC,sBAAsB,EAAE,QAAQ;AAAA,QACpC,GACA;AACA,gBAAM;AAAA,QACR;AAAA,MACF;AAAA,MACA,kBAAkB,CAAC,QAAsC;AACvD,YAAI,IAAI,KAAK,CAAC,MAAM,CAAC,EAAE,WAAW,GAAG;AACnC,gBAAM;AAAA,QACR;AAAA,MACF;AAAA,MACA,mBAAmB,CAAC,QAAgC;AAClD,YAAI,IAAI,KAAK,CAAC,MAAM,CAAC,EAAE,cAAc,GAAG;AACtC,gBAAM;AAAA,QACR;AAAA,MACF;AAAA,MACA,iBAAiB,CAAC,QAAgC;AAChD,YAAI,IAAI,KAAK,CAAC,MAAM,CAAC,EAAE,gBAAgB,EAAE,SAAS,CAAC,GAAG;AACpD,gBAAM;AAAA,QACR;AAAA,MACF;AAAA,MACA,gBAAgB,CAAC,QAAgC;AAC/C,YAAI,IAAI,KAAK,CAAC,MAAM,CAAC,EAAE,aAAa,EAAE,SAAS,CAAC,GAAG;AACjD,gBAAM;AAAA,QACR;AAAA,MACF;AAAA,MACA,oBAAoB,CAAC,SAAmB,aAA6B;AACnE,mBAAW,OAAO,SAAS;AACzB,qBAAW,OAAO,UAAU;AAC1B,kBAAM,UAAU,IAAI,GAAG;AACvB,gBAAI,CAAC,OAAO,SAAS,cAAc,IAAI,EAAE,QAAQ,GAAG;AAClD,oBAAM;AAAA,YACR;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,IAEF;AAAA,EACF;AACF,CAAC;",
        "names": []
      }
    },
    {
      "name": "vite:json",
      "start": 1709717461768,
      "end": 1709717461768,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1709717461768,
      "end": 1709717461768,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1709717461768,
      "end": 1709717461769,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1709717461769,
      "end": 1709717461769,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709717461769,
      "end": 1709717461769,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709717461769,
      "end": 1709717461769,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1709717461769,
      "end": 1709717461778,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1709717461769,
      "end": 1709717461778,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709717461778,
      "end": 1709717461778,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1709717461778,
      "end": 1709717461778,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709717461778,
      "end": 1709717461778,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1709717461778,
      "end": 1709717461778,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1709717461778,
      "end": 1709717461778,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1709717461778,
      "end": 1709717461778,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1709717461779,
      "end": 1709717461779,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1709717461782,
      "end": 1709717461782,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1709717461782,
      "end": 1709717461782,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1709717461783,
      "end": 1709717461783,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1709717461783,
      "end": 1709717461783,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1709717461783,
      "end": 1709717461783,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1709717461783,
      "end": 1709717461784,
      "order": "post"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1709717461783,
      "end": 1709717461784,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "result": "import { defineNuxtPlugin } from '#app/nuxt';\nimport moment from \"moment\";\nlet isContainAbbreviation = (value) => {\n  if (!value)\n    return true;\n  return value.includes(\".\") || value.split(\" \").some((v) => v.length == 1);\n};\nexport default defineNuxtPlugin(() => {\n  return {\n    provide: {\n      checkSex: (tab) => {\n        if (tab.some((v) => !v.sex || ![\"F\", \"M\"].includes(v.sex))) {\n          throw `Sexe au mauvais format: Verifiez votre liste <br>\n          Le sexe doit être M ou F`;\n        }\n      },\n      checkName: (tab) => {\n        if (tab.some((v) => !v.lastname || !v.firstname)) {\n          throw `Nom & prénoms obligatoires`;\n        }\n        if (tab.some(\n          (v) => isContainAbbreviation(v.firstname) || isContainAbbreviation(v.lastname)\n        )) {\n          throw `Les noms et/ou prénoms doivent être conformes à l'acte de naissance et sans abréviation.`;\n        }\n      },\n      checkNationality: (tab) => {\n        if (tab.some((v) => !v.nationality)) {\n          throw `Nationalité obligatoire.`;\n        }\n      },\n      checkPlaceOfBirth: (tab) => {\n        if (tab.some((v) => !v.place_of_birth)) {\n          throw `Nationalité obligatoire.`;\n        }\n      },\n      checkPoneNumber: (tab) => {\n        if (tab.some((v) => !v.phone_number || v.lenght < 8)) {\n          throw `Téléphone obligatoire à la soumission.`;\n        }\n      },\n      checkMatricule: (tab) => {\n        if (tab.some((v) => !v.matricule || v.lenght < 8)) {\n          throw `Matricule obligatoire à la soumission.`;\n        }\n      },\n      checkAllDatesValid: (objects, dateKeys) => {\n        for (const obj of objects) {\n          for (const key of dateKeys) {\n            const dateStr = obj[key];\n            if (!moment(dateStr, \"DD/MM/YYYY\", true).isValid()) {\n              throw `Date de naissance et date de premier prise de service sont obligatoires et au format JJ/MM/AAAA `;\n            }\n          }\n        }\n      }\n    }\n  };\n});\n",
      "start": 1709717461784,
      "end": 1709717461791,
      "order": "post",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": ";AAAA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChvC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxlnC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjzD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChzD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjvH,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC;"
      }
    },
    {
      "name": "nuxt:imports-transform",
      "result": "import { defineNuxtPlugin } from '#app/nuxt';\nimport moment from \"moment\";\nlet isContainAbbreviation = (value) => {\n  if (!value)\n    return true;\n  return value.includes(\".\") || value.split(\" \").some((v) => v.length == 1);\n};\nexport default defineNuxtPlugin(() => {\n  return {\n    provide: {\n      checkSex: (tab) => {\n        if (tab.some((v) => !v.sex || ![\"F\", \"M\"].includes(v.sex))) {\n          throw `Sexe au mauvais format: Verifiez votre liste <br>\n          Le sexe doit être M ou F`;\n        }\n      },\n      checkName: (tab) => {\n        if (tab.some((v) => !v.lastname || !v.firstname)) {\n          throw `Nom & prénoms obligatoires`;\n        }\n        if (tab.some(\n          (v) => isContainAbbreviation(v.firstname) || isContainAbbreviation(v.lastname)\n        )) {\n          throw `Les noms et/ou prénoms doivent être conformes à l'acte de naissance et sans abréviation.`;\n        }\n      },\n      checkNationality: (tab) => {\n        if (tab.some((v) => !v.nationality)) {\n          throw `Nationalité obligatoire.`;\n        }\n      },\n      checkPlaceOfBirth: (tab) => {\n        if (tab.some((v) => !v.place_of_birth)) {\n          throw `Nationalité obligatoire.`;\n        }\n      },\n      checkPoneNumber: (tab) => {\n        if (tab.some((v) => !v.phone_number || v.lenght < 8)) {\n          throw `Téléphone obligatoire à la soumission.`;\n        }\n      },\n      checkMatricule: (tab) => {\n        if (tab.some((v) => !v.matricule || v.lenght < 8)) {\n          throw `Matricule obligatoire à la soumission.`;\n        }\n      },\n      checkAllDatesValid: (objects, dateKeys) => {\n        for (const obj of objects) {\n          for (const key of dateKeys) {\n            const dateStr = obj[key];\n            if (!moment(dateStr, \"DD/MM/YYYY\", true).isValid()) {\n              throw `Date de naissance et date de premier prise de service sont obligatoires et au format JJ/MM/AAAA `;\n            }\n          }\n        }\n      }\n    }\n  };\n});\n",
      "start": 1709717461784,
      "end": 1709717461791,
      "order": "post",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": ";AAAA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChvC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACxlnC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/D,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChzD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjvH,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC;"
      }
    },
    {
      "name": "unctx:transform",
      "start": 1709717461791,
      "end": 1709717461799,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1709717461791,
      "end": 1709717461799,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1709717461799,
      "end": 1709717461799,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1709717461799,
      "end": 1709717461799,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-template",
      "start": 1709717461802,
      "end": 1709717461802,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1709717461803,
      "end": 1709717461803,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1709717461803,
      "end": 1709717461803,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1709717461803,
      "end": 1709717461805,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1709717461805,
      "end": 1709717461805,
      "order": "normal"
    }
  ]
}
