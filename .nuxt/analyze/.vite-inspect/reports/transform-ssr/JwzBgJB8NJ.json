{
  "resolvedId": "/mnt/1c4c2374-6f70-425b-ab4c-d1db6332863a/carlos/project/2024/CQM/node_modules/vuestic-ui/dist/esm-node/src/components/va-infinite-scroll/VaInfiniteScroll.vue_vue_type_script_lang.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { defineComponent, shallowRef, ref, computed, watch } from \"vue\";\nimport { d as debounce } from \"../../../vendor.mjs\";\nimport { s as sleep } from \"../../utils/sleep.mjs\";\nimport { u as useScroll } from \"./hooks/useScroll.mjs\";\nimport { V as VaProgressCircle } from \"../va-progress-circle/index.mjs\";\nimport { u as useComponentPresetProp } from \"../../composables/useComponentPreset.mjs\";\nimport { u as useColors } from \"../../composables/useColors.mjs\";\nconst _sfc_main = defineComponent({\n  name: \"VaInfiniteScroll\",\n  components: { VaProgressCircle },\n  props: {\n    ...useComponentPresetProp,\n    load: { type: Function, required: true },\n    offset: { type: Number, default: 500 },\n    reverse: { type: Boolean, default: false },\n    disabled: { type: Boolean, default: false },\n    scrollTarget: { type: [String, Object], default: void 0 },\n    debounce: { type: Number, default: 100 },\n    tag: { type: String, default: \"div\" }\n  },\n  emits: [\"onload\", \"onerror\"],\n  setup(props, { emit }) {\n    const element = shallowRef();\n    const spinnerSlotContainer = shallowRef();\n    const fetching = ref(false);\n    const error = ref(false);\n    const forcedScrolling = ref(false);\n    const debouncedLoad = ref();\n    const notScrolledContentBeforeLoad = ref(0);\n    const prevScrollTop = ref(0);\n    const scrollTargetElement = computed(() => {\n      var _a;\n      let target;\n      if (typeof props.scrollTarget === \"string\") {\n        target = document.querySelector(props.scrollTarget);\n      } else {\n        target = props.scrollTarget || ((_a = element.value) == null ? void 0 : _a.parentElement);\n      }\n      return target || document.body;\n    });\n    const {\n      addScrollListener,\n      removeScrollListener\n    } = useScroll(props, scrollTargetElement, debouncedLoad);\n    const { getColor } = useColors();\n    const spinnerColor = computed(() => {\n      return error.value ? getColor(\"danger\") : getColor(\"primary\");\n    });\n    const spinnerHeight = computed(() => {\n      var _a;\n      return ((_a = spinnerSlotContainer.value) == null ? void 0 : _a.offsetHeight) || 0;\n    });\n    const computedOffset = computed(() => {\n      return props.offset + spinnerHeight.value;\n    });\n    const stop = () => {\n      if (props.disabled) {\n        return;\n      }\n      fetching.value = false;\n      removeScrollListener();\n    };\n    const resume = () => {\n      if (props.disabled) {\n        return;\n      }\n      addScrollListener();\n    };\n    const onLoad = () => {\n      const { scrollTop, scrollHeight, clientHeight } = scrollTargetElement.value;\n      notScrolledContentBeforeLoad.value = scrollHeight - scrollTop;\n      const scrollDelta = scrollTop - prevScrollTop.value;\n      prevScrollTop.value = scrollTop;\n      if (props.disabled || error.value || fetching.value) {\n        return;\n      }\n      if (forcedScrolling.value) {\n        forcedScrolling.value = false;\n        return;\n      }\n      const isReverseScrollDirection = props.reverse && scrollDelta > 0 || !props.reverse && scrollDelta < 0;\n      if (isReverseScrollDirection) {\n        return;\n      }\n      const offset = props.reverse ? scrollTop : scrollHeight - scrollTop - clientHeight;\n      if (offset > computedOffset.value) {\n        return;\n      }\n      fetching.value = true;\n      props.load().then(finishLoading).catch(onError);\n    };\n    const forceSetScrollTopToTarget = (value) => {\n      forcedScrolling.value = true;\n      scrollTargetElement.value.scrollTop = value;\n    };\n    const updateTargetElementScrollTop = () => {\n      const { scrollTop, scrollHeight, clientHeight } = scrollTargetElement.value;\n      if (props.reverse) {\n        const isScrolledUp = scrollHeight - scrollTop < notScrolledContentBeforeLoad.value;\n        const isSpinnerHidden = scrollTop >= spinnerHeight.value;\n        if (isScrolledUp && isSpinnerHidden) {\n          return;\n        }\n        scrollHeight - notScrolledContentBeforeLoad.value > spinnerHeight.value ? forceSetScrollTopToTarget(scrollHeight - notScrolledContentBeforeLoad.value) : forceSetScrollTopToTarget(spinnerHeight.value);\n      }\n      if (!props.reverse) {\n        const isSpinnerHidden = scrollHeight - scrollTop - clientHeight >= spinnerHeight.value;\n        !isSpinnerHidden && forceSetScrollTopToTarget(scrollHeight - clientHeight - spinnerHeight.value);\n      }\n    };\n    const finishLoading = () => {\n      updateTargetElementScrollTop();\n      fetching.value = false;\n      emit(\"onload\");\n    };\n    const stopErrorDisplay = () => {\n      updateTargetElementScrollTop();\n      forcedScrolling.value = false;\n      error.value = false;\n      fetching.value = false;\n      emit(\"onerror\");\n    };\n    const onError = () => {\n      stop();\n      error.value = true;\n      sleep(1200).then(stopErrorDisplay).then(resume);\n    };\n    watch(() => props.debounce, (value) => {\n      debouncedLoad.value = debounce(onLoad, value);\n    }, { immediate: true });\n    watch(() => props.disabled, (value) => {\n      value ? stop() : resume();\n    });\n    return {\n      element,\n      spinnerSlotContainer,\n      spinnerColor,\n      fetching\n    };\n  }\n});\nexport {\n  _sfc_main as _\n};\n//# sourceMappingURL=VaInfiniteScroll.vue_vue_type_script_lang.mjs.map\n",
      "start": 1709717507561,
      "end": 1709717508012,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1709717508012,
      "end": 1709717508012,
      "order": "pre"
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1709717508012,
      "end": 1709717508012,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1709717508012,
      "end": 1709717508012,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1709717508012,
      "end": 1709717508012,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1709717508012,
      "end": 1709717508012,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1709717508012,
      "end": 1709717508012,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1709717508012,
      "end": 1709717508012,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1709717508012,
      "end": 1709717508012,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1709717508012,
      "end": 1709717508012,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1709717508012,
      "end": 1709717508012,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1709717508012,
      "end": 1709717508012,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709717508012,
      "end": 1709717508012,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709717508012,
      "end": 1709717508012,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1709717508012,
      "end": 1709717508012,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1709717508012,
      "end": 1709717508012,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709717508012,
      "end": 1709717508012,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1709717508012,
      "end": 1709717508012,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709717508012,
      "end": 1709717508012,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1709717508012,
      "end": 1709717508012,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1709717508012,
      "end": 1709717508012,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1709717508012,
      "end": 1709717508012,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1709717508012,
      "end": 1709717508012,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1709717508012,
      "end": 1709717508012,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1709717508012,
      "end": 1709717508012,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1709717508012,
      "end": 1709717508012,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1709717508012,
      "end": 1709717508012,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1709717508012,
      "end": 1709717508012,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1709717508012,
      "end": 1709717508012,
      "order": "post"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1709717508012,
      "end": 1709717508012,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1709717508012,
      "end": 1709717508012,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1709717508012,
      "end": 1709717508012,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1709717508013,
      "end": 1709717508013,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1709717508013,
      "end": 1709717508013,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1709717508013,
      "end": 1709717508013,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1709717508013,
      "end": 1709717508013,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-template",
      "start": 1709717508013,
      "end": 1709717508013,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1709717508013,
      "end": 1709717508013,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1709717508013,
      "end": 1709717508013,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1709717508013,
      "end": 1709717508013,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1709717508013,
      "end": 1709717508013,
      "order": "normal"
    }
  ]
}
