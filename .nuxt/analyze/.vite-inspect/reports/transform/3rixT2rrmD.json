{
  "resolvedId": "/mnt/1c4c2374-6f70-425b-ab4c-d1db6332863a/carlos/project/2024/CQM/node_modules/vuestic-ui/dist/es/src/components/va-button/hooks/useButtonTextColor.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { getCurrentInstance, computed } from \"vue\";\nimport { i as isServer } from \"../../../utils/ssr.js\";\nimport { u as useColors } from \"../../../composables/useColors.js\";\nconst getOpacity = (opacity) => {\n  var _a, _b, _c;\n  if (isServer()) {\n    return opacity;\n  }\n  if (opacity > 0) {\n    const userAgent = (_a = window == null ? void 0 : window.navigator) == null ? void 0 : _a.userAgent;\n    const isSafari = userAgent && /^((?!chrome|android).)*safari/i.test((_b = window == null ? void 0 : window.navigator) == null ? void 0 : _b.userAgent);\n    const isLatestSafari = userAgent && /(version.)15|16/i.test((_c = window == null ? void 0 : window.navigator) == null ? void 0 : _c.userAgent);\n    if (isSafari && !isLatestSafari) {\n      return opacity < 1 ? 1 - opacity : opacity;\n    }\n  }\n  return opacity;\n};\nconst useButtonTextColor = (textColorComputed, colorComputed, isPressed, isHovered) => {\n  const instance = getCurrentInstance();\n  if (!instance) {\n    throw new Error(\"`useButtonTextColor` hook must be used only inside of setup function!\");\n  }\n  const props = instance.props;\n  const { getColor, colorToRgba, getStateMaskGradientBackground } = useColors();\n  const plainColorStyles = computed(() => ({\n    background: \"transparent\",\n    color: textColorComputed.value,\n    \"-webkit-background-clip\": \"text\",\n    \"background-clip\": \"text\",\n    opacity: getPlainTextOpacity.value\n  }));\n  const getStateColor = (maskColor, stateOpacity, stateBehavior) => {\n    const maskStateColor = getColor(maskColor);\n    let stateStyles;\n    if (stateBehavior === \"opacity\") {\n      stateStyles = { color: colorToRgba(textColorComputed.value, stateOpacity) };\n    } else {\n      stateStyles = {\n        background: getStateMaskGradientBackground(colorComputed.value, maskStateColor, stateOpacity),\n        color: stateOpacity < 1 ? colorToRgba(textColorComputed.value, getOpacity(stateOpacity)) : maskStateColor\n      };\n    }\n    return { ...plainColorStyles.value, ...stateStyles };\n  };\n  const hoverTextColorComputed = computed(() => {\n    return getStateColor(props.hoverMaskColor, props.hoverOpacity, props.hoverBehavior);\n  });\n  const pressedTextColorComputed = computed(() => {\n    return getStateColor(props.pressedMaskColor, props.pressedOpacity, props.pressedBehavior);\n  });\n  const getPlainTextOpacity = computed(() => {\n    if (props.disabled) {\n      return void 0;\n    }\n    if (props.textOpacity === 1 || isHovered.value && !isPressed.value) {\n      return 1;\n    }\n    return isPressed.value ? 0.9 : props.textOpacity;\n  });\n  return computed(() => {\n    const defaultColorStyles = {\n      color: textColorComputed.value,\n      background: \"transparent\"\n    };\n    props.plain && Object.assign(defaultColorStyles, plainColorStyles.value, { background: textColorComputed.value });\n    if (!props.plain) {\n      return defaultColorStyles;\n    }\n    if (isPressed.value) {\n      return pressedTextColorComputed.value;\n    }\n    if (isHovered.value) {\n      return hoverTextColorComputed.value;\n    }\n    return defaultColorStyles;\n  });\n};\nexport {\n  useButtonTextColor as u\n};\n//# sourceMappingURL=useButtonTextColor.js.map\n",
      "start": 1709717426948,
      "end": 1709717427137,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1709717427137,
      "end": 1709717427137,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1709717427137,
      "end": 1709717427137,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1709717427137,
      "end": 1709717427137,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1709717427137,
      "end": 1709717427137,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1709717427137,
      "end": 1709717427137,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1709717427137,
      "end": 1709717427137,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1709717427137,
      "end": 1709717427137,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1709717427137,
      "end": 1709717427137,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1709717427137,
      "end": 1709717427137,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709717427137,
      "end": 1709717427137,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1709717427137,
      "end": 1709717427137,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1709717427137,
      "end": 1709717427137,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1709717427137,
      "end": 1709717427138,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709717427138,
      "end": 1709717427138,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1709717427138,
      "end": 1709717427138,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1709717427138,
      "end": 1709717427138,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1709717427138,
      "end": 1709717427138,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1709717427138,
      "end": 1709717427138,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1709717427138,
      "end": 1709717427138,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1709717427138,
      "end": 1709717427138,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1709717427138,
      "end": 1709717427138,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1709717427138,
      "end": 1709717427138,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1709717427138,
      "end": 1709717427138,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1709717427138,
      "end": 1709717427138,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1709717427138,
      "end": 1709717427138,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1709717427138,
      "end": 1709717427138,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1709717427138,
      "end": 1709717427138,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1709717427138,
      "end": 1709717427143,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1709717427143,
      "end": 1709717427143,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1709717427143,
      "end": 1709717427143,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1709717427143,
      "end": 1709717427143,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1709717427143,
      "end": 1709717427143,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1709717427143,
      "end": 1709717427143,
      "order": "normal"
    }
  ]
}
