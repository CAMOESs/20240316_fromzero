{
  "resolvedId": "/mnt/1c4c2374-6f70-425b-ab4c-d1db6332863a/carlos/project/2024/CQM/node_modules/vuestic-ui/dist/es/src/components/va-slider/VaSlider.vue_vue_type_script_lang.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { defineComponent, shallowRef, ref, computed, onMounted, onBeforeUnmount, watch } from \"vue\";\nimport { p as pick } from \"../../../vendor.js\";\nimport { g as generateUniqueId } from \"../../utils/uuid.js\";\nimport { v as validateSlider } from \"./validateSlider.js\";\nimport { V as VaIcon } from \"../va-icon/index.js\";\nimport { a as useStatefulProps, b as useStateful } from \"../../composables/useStateful.js\";\nimport { u as useComponentPresetProp } from \"../../composables/useComponentPreset.js\";\nimport { u as useColors } from \"../../composables/useColors.js\";\nimport { u as useArrayRefs } from \"../../composables/useArrayRefs.js\";\nimport { u as useBem } from \"../../composables/useBem.js\";\nimport { u as useTranslation } from \"../../composables/useTranslation.js\";\nconst _sfc_main = defineComponent({\n  name: \"VaSlider\",\n  components: { VaIcon },\n  emits: [\"drag-start\", \"drag-end\", \"change\", \"update:modelValue\"],\n  props: {\n    ...useStatefulProps,\n    ...useComponentPresetProp,\n    range: { type: Boolean, default: false },\n    modelValue: { type: [Number, Array], default: 0 },\n    trackLabel: { type: [Function, String] },\n    color: { type: String, default: \"primary\" },\n    trackColor: { type: String, default: \"\" },\n    labelColor: { type: String, default: \"\" },\n    trackLabelVisible: { type: Boolean, default: false },\n    min: { type: Number, default: 0 },\n    max: { type: Number, default: 100 },\n    step: { type: Number, default: 1 },\n    label: { type: String, default: \"\" },\n    invertLabel: { type: Boolean, default: false },\n    disabled: { type: Boolean, default: false },\n    readonly: { type: Boolean, default: false },\n    pins: { type: Boolean, default: false },\n    iconPrepend: { type: String, default: \"\" },\n    iconAppend: { type: String, default: \"\" },\n    vertical: { type: Boolean, default: false },\n    showTrack: { type: Boolean, default: true },\n    ariaLabel: { type: String, default: \"$t:sliderValue\" }\n  },\n  setup(props, { emit, slots }) {\n    const { getColor, getHoverColor } = useColors();\n    const sliderContainer = shallowRef();\n    const dot = shallowRef();\n    const { setItemRefByIndex, itemRefs: dots } = useArrayRefs();\n    const isFocused = ref(false);\n    const flag = ref(false);\n    const offset = ref(0);\n    const size = ref(0);\n    const defaultValue = props.range ? [0, 100] : 0;\n    const { valueComputed } = useStateful(props, emit, \"modelValue\", { defaultValue });\n    const currentSliderDotIndex = ref(0);\n    const hasMouseDown = ref(false);\n    const orders = computed(() => props.vertical ? [1, 0] : [0, 1]);\n    const pinPositionStyle = computed(() => props.vertical ? \"bottom\" : \"left\");\n    const trackSizeStyle = computed(() => props.vertical ? \"height\" : \"width\");\n    const moreToLess = computed(() => Array.isArray(val.value) && val.value[1] - props.step < val.value[0]);\n    const lessToMore = computed(() => Array.isArray(val.value) && val.value[0] + props.step > val.value[1]);\n    const sliderClass = useBem(\"va-slider\", () => ({\n      ...pick(props, [\"disabled\", \"readonly\", \"vertical\"]),\n      active: isFocused.value,\n      horizontal: !props.vertical,\n      grabbing: hasMouseDown.value\n    }));\n    const dotClass = useBem(\"va-slider__handler\", () => ({\n      onFocus: !props.range && (flag.value || isFocused.value),\n      inactive: !isFocused.value\n    }));\n    const labelStyles = computed(() => ({\n      color: props.labelColor ? getColor(props.labelColor) : getColor(props.color)\n    }));\n    const trackStyles = computed(() => ({\n      backgroundColor: props.trackColor ? getColor(props.trackColor) : getHoverColor(getColor(props.color))\n    }));\n    const processedStyles = computed(() => {\n      if (Array.isArray(val.value)) {\n        const val0 = (val.value[0] - props.min) / (props.max - props.min) * 100;\n        const val1 = (val.value[1] - props.min) / (props.max - props.min) * 100;\n        return {\n          [pinPositionStyle.value]: `${val0}%`,\n          [trackSizeStyle.value]: `${val1 - val0}%`,\n          backgroundColor: getColor(props.color),\n          visibility: props.showTrack ? \"visible\" : \"hidden\"\n        };\n      } else {\n        const val0 = (val.value - props.min) / (props.max - props.min) * 100;\n        return {\n          [trackSizeStyle.value]: `${val0}%`,\n          backgroundColor: getColor(props.color),\n          visibility: props.showTrack ? \"visible\" : \"hidden\"\n        };\n      }\n    });\n    const dottedStyles = computed(() => {\n      if (Array.isArray(val.value)) {\n        const val0 = (val.value[0] - props.min) / (props.max - props.min) * 100;\n        const val1 = (val.value[1] - props.min) / (props.max - props.min) * 100;\n        return [\n          {\n            [pinPositionStyle.value]: `${val0}%`,\n            backgroundColor: isActiveDot(0) ? getColor(props.color) : \"#ffffff\",\n            borderColor: getColor(props.color)\n          },\n          {\n            [pinPositionStyle.value]: `${val1}%`,\n            backgroundColor: isActiveDot(1) ? getColor(props.color) : \"#ffffff\",\n            borderColor: getColor(props.color)\n          }\n        ];\n      } else {\n        const val0 = (val.value - props.min) / (props.max - props.min) * 100;\n        return {\n          [pinPositionStyle.value]: `${val0}%`,\n          backgroundColor: isActiveDot(0) ? getColor(props.color) : \"#ffffff\",\n          borderColor: getColor(props.color)\n        };\n      }\n    });\n    const getDottedStyles = (index) => props.range ? dottedStyles.value[index] : dottedStyles.value;\n    const val = computed({\n      get: () => valueComputed.value,\n      set: (val2) => {\n        if (!flag.value) {\n          emit(\"change\", val2);\n        }\n        valueComputed.value = val2;\n      }\n    });\n    const getValueByOrder = (order) => props.range && order !== void 0 ? val.value[order] : val.value;\n    const gap = computed(() => {\n      const total = (props.max - props.min) / props.step;\n      return size.value / total;\n    });\n    const multiple = computed(() => {\n      const decimals = `${props.step}`.split(\".\")[1];\n      return decimals ? Math.pow(10, decimals.length) : 1;\n    });\n    const pinsCol = computed(() => (props.max - props.min) / props.step - 1);\n    const position = computed(() => {\n      return Array.isArray(val.value) ? [(val.value[0] - props.min) / props.step * gap.value, (val.value[1] - props.min) / props.step * gap.value] : (val.value - props.min) / props.step * gap.value;\n    });\n    const limit = computed(() => [0, size.value]);\n    const valueLimit = computed(() => [props.min, props.max]);\n    const isActiveDot = (index) => {\n      if (!isFocused.value && !flag.value || props.disabled || props.readonly) {\n        return false;\n      }\n      return props.range ? currentSliderDotIndex.value === index : currentSliderDotIndex.value === 0;\n    };\n    const moveStart = (e, index = currentSliderDotIndex.value) => {\n      var _a, _b;\n      e.preventDefault();\n      if (!index) {\n        if (!props.range) {\n          index = 0;\n        } else if (Array.isArray(position.value)) {\n          const touch = \"touches\" in e ? e.touches[0] : e;\n          const pos = getPos(touch);\n          index = pos > (position.value[1] - position.value[0]) / 2 + position.value[0] ? 1 : 0;\n        }\n      }\n      if (Array.isArray(val.value)) {\n        currentSliderDotIndex.value = index;\n      }\n      Array.isArray(val.value) ? (_a = dots.value[index]) == null ? void 0 : _a.focus() : (_b = dot.value) == null ? void 0 : _b.focus();\n      flag.value = true;\n      emit(\"drag-start\");\n    };\n    const moving = (e) => {\n      if (!hasMouseDown.value || !flag.value || props.disabled || props.readonly) {\n        return;\n      }\n      e.preventDefault();\n      if (\"touches\" in e) {\n        setValueOnPos(getPos(e.touches[0]));\n      } else {\n        setValueOnPos(getPos(e));\n      }\n    };\n    const moveEnd = () => {\n      if (!props.disabled && !props.readonly) {\n        if (flag.value) {\n          emit(\"drag-end\");\n          emit(\"change\", val.value);\n        }\n        flag.value = false;\n        hasMouseDown.value = false;\n      }\n    };\n    const clamp = (min, v, max) => Math.max(Math.min(v, max), min);\n    const moveWithKeys = (event) => {\n      var _a, _b;\n      if (![dots.value[0], dots.value[1], dot.value].includes(document.activeElement)) {\n        return;\n      }\n      if (props.disabled || props.readonly) {\n        return;\n      }\n      const moveDot = (where, which) => {\n        if (Array.isArray(val.value)) {\n          const value = val.value[which] + (where ? props.step : -props.step);\n          const limitedValue = clamp(props.min, value, props.max);\n          val.value = [\n            which === 0 ? limitedValue : val.value[0],\n            which === 1 ? limitedValue : val.value[1]\n          ];\n        } else {\n          const value = val.value + (where ? props.step : -props.step);\n          const limitedValue = clamp(props.min, value, props.max);\n          val.value = limitedValue;\n        }\n      };\n      if ([\"ArrowLeft\", \"ArrowUp\", \"ArrowRight\", \"ArrowDown\"].includes(event.key)) {\n        event.preventDefault();\n      }\n      const isActive = (el) => el === document.activeElement;\n      if (props.range && Array.isArray(val.value)) {\n        const isVerticalDot0More = (event2) => props.vertical && isActive(dots.value[0]) && event2.key === \"ArrowUp\";\n        const isVerticalDot0Less = (event2) => props.vertical && isActive(dots.value[0]) && event2.key === \"ArrowDown\";\n        const isVerticalDot1More = (event2) => props.vertical && isActive(dots.value[1]) && event2.key === \"ArrowUp\";\n        const isVerticalDot1Less = (event2) => props.vertical && isActive(dots.value[1]) && event2.key === \"ArrowDown\";\n        const isHorizontalDot0Less = (event2) => !props.vertical && isActive(dots.value[0]) && event2.key === \"ArrowLeft\";\n        const isHorizontalDot0More = (event2) => !props.vertical && isActive(dots.value[0]) && event2.key === \"ArrowRight\";\n        const isHorizontalDot1Less = (event2) => !props.vertical && isActive(dots.value[1]) && event2.key === \"ArrowLeft\";\n        const isHorizontalDot1More = (event2) => !props.vertical && isActive(dots.value[1]) && event2.key === \"ArrowRight\";\n        switch (true) {\n          case ((isVerticalDot1Less(event) || isHorizontalDot1Less(event)) && moreToLess.value && val.value[0] !== props.min):\n            (_a = dots.value[0]) == null ? void 0 : _a.focus();\n            moveDot(0, 0);\n            break;\n          case ((isVerticalDot0More(event) || isHorizontalDot0More(event)) && lessToMore.value && val.value[1] !== props.max):\n            (_b = dots.value[1]) == null ? void 0 : _b.focus();\n            moveDot(1, 1);\n            break;\n          case ((isVerticalDot0Less(event) || isHorizontalDot0Less(event)) && val.value[0] !== props.min):\n            moveDot(0, 0);\n            break;\n          case ((isVerticalDot1More(event) || isHorizontalDot1More(event)) && val.value[1] !== props.max):\n            moveDot(1, 1);\n            break;\n          case ((isVerticalDot1Less(event) || isHorizontalDot1Less(event)) && val.value[1] !== props.min):\n            moveDot(0, 1);\n            break;\n          case ((isVerticalDot0More(event) || isHorizontalDot0More(event)) && val.value[0] !== props.max):\n            moveDot(1, 0);\n            break;\n        }\n      } else {\n        if (props.vertical) {\n          if (event.key === \"ArrowDown\") {\n            moveDot(0, 0);\n          }\n          if (event.key === \"ArrowUp\") {\n            moveDot(1, 0);\n          }\n        } else {\n          if (event.key === \"ArrowLeft\") {\n            moveDot(0, 0);\n          }\n          if (event.key === \"ArrowRight\") {\n            moveDot(1, 0);\n          }\n        }\n      }\n    };\n    const checkActivePin = (pin) => {\n      if (Array.isArray(val.value)) {\n        return pin * props.step > val.value[0] && pin * props.step < val.value[1];\n      } else {\n        return pin * props.step < val.value;\n      }\n    };\n    const pinPositionStep = computed(() => props.step / (props.max - props.min) * 100);\n    const getPinStyles = (pin) => ({\n      backgroundColor: checkActivePin(pin) ? getColor(props.color) : getHoverColor(getColor(props.color)),\n      [pinPositionStyle.value]: `${pin * pinPositionStep.value}%`,\n      transition: hasMouseDown.value ? \"none\" : \"var(--va-slider-pin-transition)\"\n    });\n    const getPos = (e) => {\n      getStaticData();\n      return props.vertical ? offset.value - e.clientY : e.clientX - offset.value;\n    };\n    const getStaticData = () => {\n      if (sliderContainer.value) {\n        size.value = sliderContainer.value[props.vertical ? \"offsetHeight\" : \"offsetWidth\"];\n        offset.value = sliderContainer.value.getBoundingClientRect()[pinPositionStyle.value];\n      }\n    };\n    const getValueByIndex = (index) => {\n      return (props.step * multiple.value * index + props.min * multiple.value) / multiple.value;\n    };\n    const getTrackLabel = (val2, order) => {\n      if (!props.trackLabel) {\n        return val2;\n      }\n      return typeof props.trackLabel === \"function\" ? props.trackLabel(val2, order) : props.trackLabel;\n    };\n    const setCurrentValue = (newValue) => {\n      const slider = currentSliderDotIndex.value;\n      if (Array.isArray(val.value)) {\n        if (isDiff(val.value[slider], newValue)) {\n          if (slider === 0) {\n            val.value = [newValue, val.value[1]];\n          } else {\n            val.value = [val.value[0], newValue];\n          }\n        }\n      } else {\n        if (newValue < props.min) {\n          val.value = props.min;\n        } else if (newValue > props.max) {\n          val.value = props.max;\n        } else if (isDiff(val.value, newValue)) {\n          val.value = newValue;\n        }\n      }\n    };\n    const setValueOnPos = (pixelPosition) => {\n      const range = limit.value;\n      const valueRange = valueLimit.value;\n      const dotToFocus = Array.isArray(val.value) ? dots.value[currentSliderDotIndex.value] : dot.value;\n      dotToFocus == null ? void 0 : dotToFocus.focus();\n      if (pixelPosition >= range[0] && pixelPosition <= range[1]) {\n        const v = getValueByIndex(Math.round(pixelPosition / gap.value));\n        if (currentSliderDotIndex.value) {\n          if (Array.isArray(position.value) && Array.isArray(val.value) && pixelPosition <= position.value[0]) {\n            val.value = [v, val.value[0]];\n            currentSliderDotIndex.value = 0;\n          } else {\n            setCurrentValue(v);\n          }\n        } else {\n          if (Array.isArray(position.value) && Array.isArray(val.value) && pixelPosition >= position.value[1]) {\n            val.value = [val.value[1], v];\n            currentSliderDotIndex.value = 1;\n          } else {\n            setCurrentValue(v);\n          }\n        }\n      } else if (pixelPosition < range[0]) {\n        setCurrentValue(valueRange[0]);\n      } else {\n        setCurrentValue(valueRange[1]);\n      }\n    };\n    const isDiff = (a, b) => JSON.stringify(a) !== JSON.stringify(b);\n    const clickOnContainer = (e) => {\n      if (props.disabled || props.readonly) {\n        return;\n      }\n      const pos = \"touches\" in e ? getPos(e.touches[0]) : getPos(e);\n      if (Array.isArray(position.value)) {\n        currentSliderDotIndex.value = pos > (position.value[1] - position.value[0]) / 2 + position.value[0] ? 1 : 0;\n      }\n      hasMouseDown.value = true;\n      setValueOnPos(pos);\n      moveStart(e, currentSliderDotIndex.value);\n    };\n    const bindEvents = () => {\n      document.addEventListener(\"mousemove\", moving);\n      document.addEventListener(\"touchmove\", moving, { passive: false });\n      document.addEventListener(\"mouseup\", moveEnd);\n      document.addEventListener(\"mouseleave\", moveEnd);\n      document.addEventListener(\"touchcancel\", moveEnd);\n      document.addEventListener(\"touchend\", moveEnd);\n      document.addEventListener(\"keydown\", moveWithKeys);\n    };\n    const unbindEvents = () => {\n      document.removeEventListener(\"mousemove\", moving);\n      document.removeEventListener(\"touchmove\", moving);\n      document.removeEventListener(\"mouseup\", moveEnd);\n      document.removeEventListener(\"mouseleave\", moveEnd);\n      document.removeEventListener(\"touchcancel\", moveEnd);\n      document.removeEventListener(\"touchend\", moveEnd);\n      document.removeEventListener(\"keydown\", moveWithKeys);\n    };\n    const ariaLabelIdComputed = computed(() => `aria-label-id-${generateUniqueId()}`);\n    const { tp } = useTranslation();\n    const ariaAttributesComputed = computed(() => ({\n      role: \"slider\",\n      \"aria-valuemin\": props.min,\n      \"aria-valuemax\": props.max,\n      \"aria-label\": !slots.label && !props.label ? tp(props.ariaLabel, { value: String(val.value) }) : void 0,\n      \"aria-labelledby\": slots.label || props.label ? ariaLabelIdComputed.value : void 0,\n      \"aria-orientation\": props.vertical ? \"vertical\" : \"horizontal\",\n      \"aria-disabled\": props.disabled,\n      \"aria-readonly\": props.readonly,\n      \"aria-valuenow\": !Array.isArray(val.value) ? val.value : void 0,\n      \"aria-valuetext\": Array.isArray(val.value) ? String(val.value) : void 0\n    }));\n    onMounted(() => {\n      if (validateSlider(val.value, props.step, props.min, props.max, props.range)) {\n        getStaticData();\n        bindEvents();\n      }\n    });\n    onBeforeUnmount(unbindEvents);\n    watch([\n      val,\n      () => props.step,\n      () => props.min,\n      () => props.max,\n      () => props.range\n    ], ([value, step, min, max, range]) => {\n      validateSlider(value, step, min, max, range);\n    });\n    watch(hasMouseDown, (hasMouseDown2) => {\n      document.documentElement.style.cursor = hasMouseDown2 ? \"grabbing\" : \"\";\n    });\n    return {\n      getColor,\n      dot,\n      dots,\n      setItemRefByIndex,\n      orders,\n      sliderContainer,\n      val,\n      getValueByOrder,\n      sliderClass,\n      dotClass,\n      labelStyles,\n      processedStyles,\n      getPinStyles,\n      dottedStyles,\n      getDottedStyles,\n      clickOnContainer,\n      hasMouseDown,\n      trackStyles,\n      pinsCol,\n      checkActivePin,\n      isFocused,\n      isActiveDot,\n      getTrackLabel,\n      currentSliderDotIndex,\n      ariaLabelIdComputed,\n      ariaAttributesComputed\n    };\n  }\n});\nexport {\n  _sfc_main as _\n};\n\nimport '../../../VaSlider.css';\n//# sourceMappingURL=VaSlider.vue_vue_type_script_lang.js.map\n",
      "start": 1709717423195,
      "end": 1709717423382,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1709717423382,
      "end": 1709717423382,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1709717423382,
      "end": 1709717423382,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1709717423382,
      "end": 1709717423382,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1709717423382,
      "end": 1709717423382,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1709717423382,
      "end": 1709717423382,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1709717423382,
      "end": 1709717423382,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1709717423383,
      "end": 1709717423383,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1709717423383,
      "end": 1709717423383,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1709717423383,
      "end": 1709717423383,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709717423383,
      "end": 1709717423383,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1709717423383,
      "end": 1709717423383,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1709717423383,
      "end": 1709717423383,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1709717423383,
      "end": 1709717423383,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709717423383,
      "end": 1709717423383,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1709717423383,
      "end": 1709717423383,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1709717423383,
      "end": 1709717423385,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1709717423385,
      "end": 1709717423385,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1709717423385,
      "end": 1709717423385,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1709717423385,
      "end": 1709717423385,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1709717423385,
      "end": 1709717423385,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1709717423385,
      "end": 1709717423396,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1709717423397,
      "end": 1709717423397,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1709717423397,
      "end": 1709717423397,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1709717423397,
      "end": 1709717423397,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1709717423397,
      "end": 1709717423397,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1709717423397,
      "end": 1709717423397,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1709717423397,
      "end": 1709717423397,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1709717423397,
      "end": 1709717423397,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1709717423397,
      "end": 1709717423397,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1709717423397,
      "end": 1709717423397,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1709717423397,
      "end": 1709717423397,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1709717423397,
      "end": 1709717423397,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1709717423397,
      "end": 1709717423397,
      "order": "normal"
    }
  ]
}
