{
  "resolvedId": "/mnt/1c4c2374-6f70-425b-ab4c-d1db6332863a/carlos/project/2024/CQM/node_modules/vuestic-ui/dist/es/src/components/va-select/VaSelect.vue_vue_type_script_lang.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { defineComponent, shallowRef, computed, watch, ref, nextTick } from \"vue\";\nimport { p as pick } from \"../../../vendor.js\";\nimport { V as VaInputWrapper } from \"../va-input-wrapper/index.js\";\nimport { V as VaDropdown } from \"../va-dropdown/index.js\";\nimport { V as VaIcon } from \"../va-icon/index.js\";\nimport { V as VaSelectOptionList } from \"./components/VaSelectOptionList/index.js\";\nimport { V as VaSelectContent } from \"./components/VaSelectContent/index.js\";\nimport { u as useMaxVisibleOptionsProps, a as useMaxVisibleOptions } from \"./hooks/useMaxVisibleOptions.js\";\nimport { u as useToggleIconProps, a as useToggleIcon } from \"./hooks/useToggleIcon.js\";\nimport { u as useStringValueProps, a as useStringValue } from \"./hooks/useStringValue.js\";\nimport { u as useAutocompleteProps, a as useAutocomplete } from \"./hooks/useAutocomplete.js\";\nimport { u as useSelectAria } from \"./hooks/useSelectAria.js\";\nimport { f as focusElement, b as blurElement } from \"../../utils/focus.js\";\nimport { u as unwrapEl } from \"../../utils/unwrapEl.js\";\nimport { i as isNilValue } from \"../../utils/isNilValue.js\";\nimport { w as warn } from \"../../utils/console.js\";\nimport { V as VaDropdownContent } from \"../va-dropdown/components/VaDropdownContent/index.js\";\nimport { u as useMaxSelectionsProps, a as useMaxSelections } from \"../../composables/useMaxSelections.js\";\nimport { e as extractComponentProps } from \"../../utils/component-options/extract-component-options.js\";\nimport { a as useDropdownableEmits, u as useDropdownableProps, b as useDropdownable } from \"../../composables/useDropdownable.js\";\nimport { u as useValidationEmits, b as useValidationProps, a as useValidation } from \"../../composables/useValidation.js\";\nimport { a as useClearableEmits, u as useClearableProps, b as useClearable } from \"../../composables/useClearable.js\";\nimport { u as useComponentPresetProp } from \"../../composables/useComponentPreset.js\";\nimport { u as useSelectableListProps, a as useSelectableList } from \"../../composables/useSelectableList.js\";\nimport { u as useLoadingProps } from \"../../composables/useLoading.js\";\nimport { u as useFormFieldProps } from \"../../composables/useFormField.js\";\nimport { u as useThrottleProps } from \"../../composables/useThrottle.js\";\nimport { u as useTranslation } from \"../../composables/useTranslation.js\";\nimport { u as useFocusDeep } from \"../../composables/useFocusDeep.js\";\nimport { u as useSyncProp } from \"../../composables/useSyncProp.js\";\nimport { u as useBem } from \"../../composables/useBem.js\";\nimport { f as filterComponentProps } from \"../../utils/component-options/filter-props.js\";\nconst VaInputWrapperProps = extractComponentProps(VaInputWrapper);\nconst _sfc_main = defineComponent({\n  name: \"VaSelect\",\n  components: {\n    VaSelectContent,\n    VaSelectOptionList,\n    VaIcon,\n    VaDropdown,\n    VaDropdownContent,\n    VaInputWrapper\n  },\n  emits: [\n    \"update:modelValue\",\n    \"update-search\",\n    \"create-new\",\n    \"scroll-bottom\",\n    \"update:search\",\n    ...useDropdownableEmits,\n    ...useValidationEmits,\n    ...useClearableEmits\n  ],\n  props: {\n    ...VaInputWrapperProps,\n    ...useComponentPresetProp,\n    ...useSelectableListProps,\n    ...useValidationProps,\n    ...useLoadingProps,\n    ...useMaxSelectionsProps,\n    ...useClearableProps,\n    ...useFormFieldProps,\n    ...useMaxVisibleOptionsProps,\n    ...useToggleIconProps,\n    ...useThrottleProps,\n    ...useStringValueProps,\n    ...useAutocompleteProps,\n    ...useDropdownableProps,\n    modelValue: {\n      type: [String, Number, Array, Object, Boolean],\n      default: \"\"\n    },\n    // Dropdown placement\n    placement: {\n      ...useDropdownableProps.placement,\n      default: \"bottom\"\n    },\n    allowCreate: {\n      type: [Boolean, String],\n      default: false,\n      validator: (mode) => [true, false, \"unique\"].includes(mode)\n    },\n    color: { type: String, default: \"primary\" },\n    multiple: { type: Boolean, default: false },\n    searchable: { type: Boolean, default: false },\n    width: { type: String, default: \"100%\" },\n    maxHeight: { type: String, default: \"256px\" },\n    noOptionsText: { type: String, default: \"$t:noOptions\" },\n    hideSelected: { type: Boolean, default: false },\n    tabindex: { type: [String, Number], default: 0 },\n    virtualScroller: { type: Boolean, default: false },\n    selectedTopShown: { type: Boolean, default: false },\n    highlightMatchedText: { type: Boolean, default: true },\n    minSearchChars: { type: Number, default: 0 },\n    autoSelectFirstOption: { type: Boolean, default: false },\n    // Input style\n    placeholder: { type: String, default: \"\" },\n    searchPlaceholderText: { type: String, default: \"$t:search\" },\n    ariaLabel: { type: String, default: \"$t:select\" },\n    ariaSearchLabel: { type: String, default: \"$t:optionsFilter\" },\n    ariaClearLabel: { type: String, default: \"$t:reset\" },\n    search: { type: String, default: void 0 }\n  },\n  setup(props, { emit, slots }) {\n    const { tp, t } = useTranslation();\n    const optionList = shallowRef();\n    const input = shallowRef();\n    const searchBar = shallowRef();\n    const isInputFocused = useFocusDeep(input);\n    const { getValue, getText, getTrackBy } = useSelectableList(props);\n    const onScrollBottom = () => emit(\"scroll-bottom\");\n    const [searchVModel] = useSyncProp(\"search\", props, emit, \"\");\n    const showSearchInput = computed(() => props.searchable || props.allowCreate && !props.autocomplete);\n    watch(searchVModel, (value) => {\n      emit(\"update-search\", value);\n      if (!props.autocomplete) {\n        hoveredOption.value = null;\n      }\n    });\n    const getOptionByValue = (value) => {\n      if (isNilValue(value) || typeof value === \"object\") {\n        return value;\n      }\n      const optionByValue = props.options.find((option) => value === getValue(option));\n      if (optionByValue === void 0) {\n        warn(`[VaSelect]: can not find option in options list (${JSON.stringify(props.options)}) by provided value (${JSON.stringify(value)})!`);\n        return value;\n      }\n      return optionByValue;\n    };\n    const {\n      toggleHiddenOptionsState,\n      isAllOptionsShown,\n      visibleSelectedOptions,\n      hiddenSelectedOptionsAmount,\n      allSelectedOptions\n    } = useMaxVisibleOptions(props, getOptionByValue);\n    const valueComputed = computed({\n      get() {\n        if (props.multiple) {\n          return allSelectedOptions.value;\n        }\n        const value = getOptionByValue(props.modelValue);\n        if (Array.isArray(value)) {\n          warn(\"Model value should be a string, number, boolean or an object for a single Select.\");\n          if (value.length) {\n            return value.at(-1);\n          }\n        }\n        return value;\n      },\n      set(option) {\n        if (Array.isArray(option)) {\n          emit(\"update:modelValue\", option.map(getValue));\n        } else {\n          emit(\"update:modelValue\", getValue(option));\n        }\n      }\n    });\n    const valueString = useStringValue(props, visibleSelectedOptions, getText);\n    const {\n      canBeCleared,\n      clearIconProps,\n      onFocus,\n      onBlur\n    } = useClearable(props, valueComputed);\n    const showClearIcon = computed(() => {\n      if (!canBeCleared.value) {\n        return false;\n      }\n      if (props.multiple && Array.isArray(valueComputed.value)) {\n        return !!valueComputed.value.length;\n      }\n      return true;\n    });\n    const filteredOptions = computed(() => {\n      if (!props.options) {\n        return [];\n      }\n      if (props.selectedTopShown) {\n        return props.options.slice().sort((a, b) => {\n          const isASelected = checkIsOptionSelected(a);\n          const isBSelected = checkIsOptionSelected(b);\n          if (isASelected && isBSelected) {\n            return 0;\n          }\n          if (isASelected && !isBSelected) {\n            return -1;\n          }\n          return 1;\n        });\n      }\n      if (props.hideSelected) {\n        return props.options.filter((option) => !checkIsOptionSelected(option));\n      }\n      return props.options;\n    });\n    const checkIsOptionSelected = (option) => {\n      if (isNilValue(valueComputed.value)) {\n        return false;\n      }\n      if (Array.isArray(valueComputed.value)) {\n        return !isNilValue(valueComputed.value.find((valueItem) => compareOptions(valueItem, option)));\n      }\n      return compareOptions(valueComputed.value, option);\n    };\n    const compareOptions = (option1, option2) => {\n      const one = getValue(option1);\n      const two = getValue(option2);\n      if (one === two) {\n        return true;\n      }\n      if (typeof one === \"string\" && typeof two === \"string\") {\n        return one === two;\n      }\n      if (one === null || two === null) {\n        return false;\n      }\n      if (typeof one === \"object\" && typeof two === \"object\") {\n        return getTrackBy(one) === getTrackBy(two);\n      }\n      return false;\n    };\n    const isValueComputedArray = (v) => Array.isArray(v.value);\n    const selectOption = (option) => {\n      if (hoveredOption.value === null) {\n        hideAndFocus();\n        return;\n      }\n      if (showSearchInput.value) {\n        searchVModel.value = \"\";\n      }\n      if (props.multiple && isValueComputedArray(valueComputed)) {\n        const { exceedsMaxSelections, addOption } = useMaxSelections(valueComputed, ref(props.maxSelections));\n        const isSelected = checkIsOptionSelected(option);\n        if (isSelected) {\n          valueComputed.value = valueComputed.value.filter((optionSelected) => !compareOptions(option, optionSelected));\n        } else {\n          if (exceedsMaxSelections()) {\n            return;\n          }\n          valueComputed.value = addOption(option);\n        }\n      } else {\n        valueComputed.value = typeof option !== \"object\" ? option : { ...option };\n        hideAndFocus();\n      }\n      focusAutocompleteInput();\n    };\n    const addNewOption = () => {\n      var _a;\n      const hasAddedOption = (_a = props.options) == null ? void 0 : _a.some((option) => [searchVModel.value, autocompleteValue.value].includes(getText(option)));\n      const allowedToCreateCheck = !((props.allowCreate === \"unique\" || props.autocomplete) && hasAddedOption);\n      if (allowedToCreateCheck) {\n        emit(\"create-new\", searchVModel.value || autocompleteValue.value);\n        searchVModel.value = \"\";\n        autocompleteValue.value = \"\";\n      }\n    };\n    const hoveredOption = ref(null);\n    const selectHoveredOption = () => {\n      if (isNilValue(hoveredOption.value)) {\n        return;\n      }\n      if (!isOpenSync.value) {\n        handleDropdownOpen();\n        return;\n      }\n      selectOption(hoveredOption.value);\n    };\n    const selectOrAddOption = () => {\n      const allowedToCreate = !!props.allowCreate && (searchVModel.value || autocompleteValue.value);\n      if (hoveredOption.value !== null) {\n        selectHoveredOption();\n      } else if (allowedToCreate) {\n        addNewOption();\n      }\n    };\n    const focusPreviousOption = () => {\n      var _a;\n      return (_a = optionList.value) == null ? void 0 : _a.focusPreviousOption();\n    };\n    const focusNextOption = () => {\n      var _a;\n      return (_a = optionList.value) == null ? void 0 : _a.focusNextOption();\n    };\n    const { isOpenSync, dropdownProps } = useDropdownable(props, emit, {\n      defaultCloseOnValueUpdate: computed(() => !props.multiple)\n    });\n    const dropdownPropsComputed = computed(() => ({\n      ...dropdownProps.value,\n      closeOnContentClick: false,\n      stateful: false,\n      offset: [1, 0],\n      keepAnchorWidth: true,\n      keyboardNavigation: true,\n      innerAnchorSelector: \".va-input-wrapper__field\"\n    }));\n    const showDropdownContentComputed = computed({\n      get: () => isOpenSync.value,\n      set: (show) => {\n        show ? handleDropdownOpen() : handleDropdownClose();\n      }\n    });\n    const handleDropdownOpen = () => {\n      if (props.disabled || props.readonly) {\n        return;\n      }\n      isOpenSync.value = true;\n      scrollToSelected();\n      focusSearchOrOptions();\n    };\n    const handleDropdownClose = () => {\n      isOpenSync.value = false;\n      if (!props.autocomplete) {\n        searchVModel.value = \"\";\n      }\n      nextTick(() => {\n        validate();\n        isInputFocused.focusIfNothingIfFocused();\n      });\n    };\n    const hideAndFocus = () => {\n      handleDropdownClose();\n      isInputFocused.value = true;\n    };\n    const focusSearchBar = () => {\n      var _a;\n      (_a = searchBar.value) == null ? void 0 : _a.focus();\n    };\n    const focusOptionList = () => {\n      var _a, _b;\n      (_a = optionList.value) == null ? void 0 : _a.focus();\n      !props.modelValue && ((_b = optionList.value) == null ? void 0 : _b.focusFirstOption());\n    };\n    const focusSearchOrOptions = async () => {\n      await nextTick();\n      if (showSearchInput.value) {\n        focusSearchBar();\n      } else {\n        focusOptionList();\n      }\n    };\n    const onInputBlur = () => {\n      if (showDropdownContentComputed.value) {\n        return;\n      }\n      onBlur();\n      isInputFocused.value ? isInputFocused.value = false : validate();\n    };\n    const tabIndexComputed = computed(() => props.disabled ? -1 : props.tabindex);\n    const openSelectButtonTabIndexComputed = computed(() => props.disabled || props.autocomplete ? -1 : 0);\n    const scrollToSelected = () => {\n      const selected = valueComputed.value;\n      const nothingSelected = typeof selected !== \"object\" && Array.isArray(selected) && !selected.length;\n      if (nothingSelected) {\n        return;\n      }\n      const scrollTo = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n      hoveredOption.value = scrollTo;\n      nextTick(() => {\n        var _a;\n        return (_a = optionList.value) == null ? void 0 : _a.scrollToOption(scrollTo);\n      });\n    };\n    let hintedSearchQuery = \"\";\n    let hintedSearchQueryTimeoutIndex;\n    const navigationKeys = [\"ArrowUp\", \"ArrowDown\", \"ArrowLeft\", \"ArrowRight\", \"Enter\", \" \"];\n    const onHintedSearch = (event) => {\n      if (navigationKeys.some((key) => key === event.key)) {\n        return;\n      }\n      const isLetter = event.key.length === 1;\n      const isDeleteKey = event.key === \"Backspace\" || event.key === \"Delete\";\n      clearTimeout(hintedSearchQueryTimeoutIndex);\n      if (isDeleteKey) {\n        hintedSearchQuery = hintedSearchQuery ? hintedSearchQuery.slice(0, -1) : \"\";\n      } else if (isLetter) {\n        hintedSearchQuery += event.key;\n      }\n      if (showSearchInput.value) {\n        searchVModel.value = hintedSearchQuery;\n        return;\n      }\n      if (hintedSearchQuery) {\n        const appropriateOption = props.options.find((option) => getText(option).toLowerCase().startsWith(hintedSearchQuery.toLowerCase()));\n        if (appropriateOption) {\n          hoveredOption.value = appropriateOption;\n        }\n      }\n      hintedSearchQueryTimeoutIndex = setTimeout(() => {\n        hintedSearchQuery = \"\";\n      }, 1e3);\n    };\n    const optionsListPropsComputed = computed(() => ({\n      ...pick(props, [\"textBy\", \"trackBy\", \"groupBy\", \"valueBy\", \"disabledBy\", \"color\", \"virtualScroller\", \"highlightMatchedText\", \"minSearchChars\", \"delay\", \"selectedTopShown\"]),\n      autoSelectFirstOption: props.autoSelectFirstOption || props.autocomplete,\n      search: searchVModel.value || autocompleteValue.value,\n      tabindex: tabIndexComputed.value,\n      selectedValue: valueComputed.value,\n      options: filteredOptions.value,\n      getSelectedState: checkIsOptionSelected,\n      noOptionsText: tp(props.noOptionsText)\n    }));\n    const { toggleIcon, toggleIconColor } = useToggleIcon(props, isOpenSync);\n    const isFocused = computed(() => isInputFocused.value || isOpenSync.value);\n    const inputWrapperClassComputed = useBem(\"va-select-anchor\", () => ({\n      nowrap: !!(props.maxVisibleOptions && !slots.content)\n    }));\n    const vaInputWrapperProps = filterComponentProps(VaInputWrapperProps);\n    const inputWrapperPropsComputed = computed(() => ({\n      ...vaInputWrapperProps.value,\n      error: computedError.value,\n      errorMessages: computedErrorMessages.value,\n      focused: isFocused.value,\n      \"aria-label\": props.ariaLabel || (props.modelValue ? `${t(\"selectedOption\")}: ${props.modelValue}` : t(\"noSelectedOption\"))\n    }));\n    const selectContentPropsComputed = computed(() => ({\n      ...pick(props, [\"placeholder\", \"autocomplete\", \"multiple\", \"disabled\", \"readonly\"]),\n      tabindex: tabIndexComputed.value,\n      value: visibleSelectedOptions.value,\n      valueString: valueString.value,\n      hiddenSelectedOptionsAmount: hiddenSelectedOptionsAmount.value,\n      isAllOptionsShown: isAllOptionsShown.value,\n      focused: isInputFocused.value,\n      autocompleteInputValue: autocompleteValue.value,\n      getText\n    }));\n    const autocompleteValue = useAutocomplete(searchVModel, props, visibleSelectedOptions, isOpenSync, getText);\n    const setAutocompleteValue = (v) => autocompleteValue.value = v;\n    const focus = () => {\n      if (props.disabled) {\n        return;\n      }\n      focusElement(unwrapEl(input.value));\n    };\n    const blur = () => {\n      if (showDropdownContentComputed.value) {\n        showDropdownContentComputed.value = false;\n      }\n      nextTick(() => {\n        if (props.disabled) {\n          return;\n        }\n        blurElement(unwrapEl(input.value));\n      });\n    };\n    const reset = () => withoutValidation(() => {\n      if (props.multiple) {\n        valueComputed.value = Array.isArray(props.clearValue) ? props.clearValue : [];\n      } else {\n        valueComputed.value = props.clearValue;\n      }\n      searchVModel.value = \"\";\n      emit(\"clear\");\n      resetValidation();\n      nextTick(() => {\n        isInputFocused.value = true;\n      });\n    });\n    const focusAutocompleteInput = (e) => {\n      if (props.autocomplete && !props.disabled && !props.readonly) {\n        e == null ? void 0 : e.stopImmediatePropagation();\n        isInputFocused.value = true;\n        isOpenSync.value = true;\n      }\n    };\n    const toggleDropdown = (e) => {\n      if (props.disabled || props.readonly) {\n        return;\n      }\n      if (e.code === \"Space\" && props.autocomplete) {\n        return;\n      }\n      showDropdownContentComputed.value = !showDropdownContentComputed.value;\n    };\n    const deleteLastSelected = () => {\n      if (!Array.isArray(valueComputed.value)) {\n        return;\n      }\n      valueComputed.value = valueComputed.value.slice(0, -1);\n    };\n    const {\n      validate,\n      computedError,\n      computedErrorMessages,\n      withoutValidation,\n      resetValidation\n    } = useValidation(props, emit, { reset, focus, value: valueComputed });\n    const { popupId } = useSelectAria();\n    const searchInput = searchVModel;\n    const onInputFocus = onFocus;\n    return {\n      popupId,\n      input,\n      optionList,\n      searchBar,\n      reset,\n      focus,\n      blur,\n      toggleDropdown,\n      deleteLastSelected,\n      focusAutocompleteInput,\n      tp,\n      t,\n      onInputFocus,\n      onInputBlur,\n      focusOptionList,\n      focusSearchBar,\n      searchInput,\n      showSearchInput,\n      hoveredOption,\n      tabIndexComputed,\n      valueString,\n      showClearIcon,\n      toggleIcon,\n      selectOption,\n      selectOrAddOption,\n      selectHoveredOption,\n      focusPreviousOption,\n      focusNextOption,\n      showDropdownContentComputed,\n      handleDropdownOpen,\n      handleDropdownClose,\n      hideAndFocus,\n      toggleIconColor,\n      onHintedSearch,\n      onScrollBottom,\n      clearIconProps,\n      dropdownPropsComputed,\n      visibleSelectedOptions,\n      optionsListPropsComputed,\n      toggleHiddenOptionsState,\n      setAutocompleteValue,\n      inputWrapperPropsComputed,\n      inputWrapperClassComputed,\n      selectContentPropsComputed,\n      openSelectButtonTabIndexComputed,\n      // for e2e tests\n      getOptionByValue,\n      compareOptions,\n      getText\n    };\n  }\n});\nexport {\n  _sfc_main as _\n};\n\nimport '../../../VaSelect.css';\n//# sourceMappingURL=VaSelect.vue_vue_type_script_lang.js.map\n",
      "start": 1709717423105,
      "end": 1709717423217,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1709717423217,
      "end": 1709717423217,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1709717423217,
      "end": 1709717423217,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1709717423217,
      "end": 1709717423217,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1709717423217,
      "end": 1709717423217,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1709717423217,
      "end": 1709717423217,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1709717423217,
      "end": 1709717423217,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1709717423217,
      "end": 1709717423217,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1709717423217,
      "end": 1709717423217,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1709717423217,
      "end": 1709717423217,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709717423217,
      "end": 1709717423218,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1709717423218,
      "end": 1709717423218,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1709717423218,
      "end": 1709717423218,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1709717423218,
      "end": 1709717423218,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709717423218,
      "end": 1709717423218,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1709717423218,
      "end": 1709717423218,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1709717423218,
      "end": 1709717423218,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1709717423218,
      "end": 1709717423218,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1709717423218,
      "end": 1709717423218,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1709717423218,
      "end": 1709717423218,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1709717423218,
      "end": 1709717423218,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1709717423218,
      "end": 1709717423220,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1709717423220,
      "end": 1709717423220,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1709717423220,
      "end": 1709717423220,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1709717423220,
      "end": 1709717423220,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1709717423220,
      "end": 1709717423220,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1709717423220,
      "end": 1709717423220,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1709717423220,
      "end": 1709717423220,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1709717423220,
      "end": 1709717423220,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1709717423220,
      "end": 1709717423220,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1709717423220,
      "end": 1709717423220,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1709717423220,
      "end": 1709717423220,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1709717423220,
      "end": 1709717423220,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1709717423220,
      "end": 1709717423220,
      "order": "normal"
    }
  ]
}
