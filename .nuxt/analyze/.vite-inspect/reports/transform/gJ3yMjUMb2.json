{
  "resolvedId": "/mnt/1c4c2374-6f70-425b-ab4c-d1db6332863a/carlos/project/2024/CQM/node_modules/vuestic-ui/dist/es/src/components/va-toast/toast.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { createVNode, render } from \"vue\";\nimport { a as getGlobal } from \"../../utils/ssr.js\";\nimport { V as VaToast } from \"./index.js\";\nconst GAP = 5;\nlet seed = 1;\ngetGlobal().vaToastInstances = [];\nconst getTranslateValue = (item, position) => {\n  if (item.el) {\n    const direction = position.includes(\"bottom\") ? -1 : 1;\n    return (item.el.offsetHeight + GAP) * direction;\n  }\n  return 0;\n};\nconst getNewTranslateValue = (transformY, redundantHeight, position) => {\n  const direction = position.includes(\"bottom\") ? -1 : 1;\n  return parseInt(transformY, 10) - (redundantHeight + GAP) * direction;\n};\nconst getNodeProps = (vNode) => {\n  var _a;\n  return ((_a = vNode.component) == null ? void 0 : _a.props) || {};\n};\nconst closeNotification = (targetInstance, destroyElementFn) => {\n  var _a;\n  if (!targetInstance) {\n    return;\n  }\n  if (!getGlobal().vaToastInstances.length) {\n    seed = 1;\n    return;\n  }\n  const targetInstanceIndex = getGlobal().vaToastInstances.findIndex((instance) => instance === targetInstance);\n  if (targetInstanceIndex < 0) {\n    return;\n  }\n  const nodeProps = getNodeProps(targetInstance);\n  const {\n    offsetX: targetOffsetX,\n    offsetY: targetOffsetY,\n    position: targetPosition\n  } = nodeProps;\n  const redundantHeight = (_a = targetInstance.el) == null ? void 0 : _a.offsetHeight;\n  destroyElementFn();\n  getGlobal().vaToastInstances = getGlobal().vaToastInstances.reduce((acc, instance, index) => {\n    if (instance === targetInstance) {\n      return acc;\n    }\n    if (instance.component) {\n      const { offsetX, offsetY, position } = getNodeProps(instance);\n      const isNextInstance = index > targetInstanceIndex && targetOffsetX === offsetX && targetOffsetY === offsetY && targetPosition === position;\n      if (isNextInstance && instance.el && redundantHeight) {\n        const [_, transformY] = instance.el.style.transform.match(/[\\d-]+(?=px)/g);\n        const transformYNew = getNewTranslateValue(transformY, redundantHeight, position);\n        instance.el.style.transform = `translate(0, ${transformYNew}px)`;\n      }\n    }\n    return [...acc, instance];\n  }, []);\n  if (!getGlobal().vaToastInstances.length) {\n    seed = 1;\n  }\n};\nconst destroy = (el, node) => {\n  if (el) {\n    render(null, el);\n    el.remove();\n  }\n  el = null;\n};\nconst mount = (component, {\n  props,\n  children,\n  element,\n  appContext\n} = {}) => {\n  let el = element;\n  let vNode;\n  const onClose = () => {\n    closeNotification(vNode, () => destroy(el));\n    if (props == null ? void 0 : props.onClose) {\n      props.onClose();\n    }\n  };\n  vNode = createVNode(component, { ...props, onClose }, children);\n  if (appContext) {\n    vNode.appContext = appContext;\n  }\n  if (el) {\n    render(vNode, el);\n  } else if (typeof document !== \"undefined\") {\n    render(vNode, el = document.createElement(\"div\"));\n  }\n  return { vNode, el };\n};\nconst closeAllNotifications = (appContext) => {\n  if (!getGlobal().vaToastInstances.length) {\n    seed = 1;\n    return;\n  }\n  getGlobal().vaToastInstances.forEach((instance) => {\n    if (appContext && instance.appContext !== appContext) {\n      return;\n    }\n    getNodeProps(instance).onClose();\n  });\n};\nconst closeById = (id) => {\n  const targetInstance = getGlobal().vaToastInstances.find((instance) => {\n    var _a;\n    return ((_a = instance.el) == null ? void 0 : _a.id) === id;\n  });\n  if (targetInstance) {\n    const nodeProps = getNodeProps(targetInstance);\n    nodeProps.onClose();\n  }\n};\nconst getToastOptions = (options) => {\n  if (typeof options === \"string\") {\n    return {\n      message: options\n    };\n  }\n  return options;\n};\nconst createToastInstance = (customProps, appContext) => {\n  const { vNode, el } = mount(VaToast, { appContext, props: getToastOptions(customProps) });\n  const nodeProps = getNodeProps(vNode);\n  if (el && vNode.el && nodeProps) {\n    document.body.appendChild(el.childNodes[0]);\n    const { offsetX, offsetY, position } = nodeProps;\n    vNode.el.style.display = \"flex\";\n    vNode.el.id = \"notification_\" + seed;\n    let transformY = 0;\n    getGlobal().vaToastInstances.filter((item) => {\n      const {\n        offsetX: itemOffsetX,\n        offsetY: itemOffsetY,\n        position: itemPosition\n      } = getNodeProps(item);\n      return itemOffsetX === offsetX && itemOffsetY === offsetY && position === itemPosition;\n    }).forEach((item) => {\n      transformY += getTranslateValue(item, position);\n    });\n    vNode.el.style.transform = `translate(0, ${transformY}px)`;\n    seed += 1;\n    getGlobal().vaToastInstances.push(vNode);\n    return vNode.el.id;\n  }\n  return null;\n};\nexport {\n  closeById as a,\n  closeAllNotifications as b,\n  createToastInstance as c\n};\n//# sourceMappingURL=toast.js.map\n",
      "start": 1709717416157,
      "end": 1709717416414,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1709717416414,
      "end": 1709717416414,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1709717416414,
      "end": 1709717416414,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1709717416414,
      "end": 1709717416414,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1709717416414,
      "end": 1709717416414,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1709717416414,
      "end": 1709717416414,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1709717416414,
      "end": 1709717416414,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1709717416414,
      "end": 1709717416414,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1709717416414,
      "end": 1709717416414,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1709717416414,
      "end": 1709717416414,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709717416414,
      "end": 1709717416414,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1709717416414,
      "end": 1709717416414,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1709717416414,
      "end": 1709717416414,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1709717416414,
      "end": 1709717416414,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1709717416414,
      "end": 1709717416414,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1709717416414,
      "end": 1709717416415,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1709717416415,
      "end": 1709717416415,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1709717416415,
      "end": 1709717416415,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1709717416415,
      "end": 1709717416415,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1709717416415,
      "end": 1709717416415,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1709717416415,
      "end": 1709717416415,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1709717416415,
      "end": 1709717416416,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1709717416416,
      "end": 1709717416416,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1709717416416,
      "end": 1709717416416,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1709717416416,
      "end": 1709717416416,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1709717416416,
      "end": 1709717416416,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1709717416416,
      "end": 1709717416416,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1709717416416,
      "end": 1709717416416,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1709717416416,
      "end": 1709717416416,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1709717416417,
      "end": 1709717416417,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1709717416417,
      "end": 1709717416417,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1709717416417,
      "end": 1709717416417,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1709717416417,
      "end": 1709717416417,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1709717416417,
      "end": 1709717416417,
      "order": "normal"
    }
  ]
}
